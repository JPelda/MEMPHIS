[SQL]
#Connection to your db for import via sqlalchemy create_engine and pandas
db = mysql+pymysql://root:wasteheat@localhost:3306/memphis

[SQL_QUERIES]
#For example epsg:4326 for WGS84. It defines coordinate system of the gis data.
coord_system = epsg:4326
#Country of the city.
country = Germany

#Coordinates in WGS84 of the city, here it is GÃ¶ttingen
x_min = 9.817604830737904
y_min = 51.494537944495484
x_max = 10.010783127311162
y_max = 51.577276546265246

#Definition of the columns of your gis data. Key of dictionary is fixed, value of key has to be adjusted according your gis data.
gis_roads = dict({'table': 'ger_ns_roads', 'col': dict({'SHAPE':['ST_ASText(SHAPE)'], 'id':'osm_id', 'name':'name'}), 'coord_system':'epsg:4326', 'geo':['ST_GEOMFROMTEXT(ST_ASText(SHAPE))']})

gis_buildings = dict({'table': 'ger_ns_buildings', 'col': dict({'SHAPE':['ST_ASText(SHAPE)'], 'id':'osm_id', 'name':'name', 'fclass':'fclass', 'type':'type', 'code':'code'}), 'coord_system':'epsg:4326', 'geo':['ST_GEOMFROMTEXT(ST_ASText(SHAPE))']})

#Definition of used building types.
gis_categories = dict({'table': 'gis_categories', 'col': dict({'type':'type', 'cat':'category', 'cmPsma':'cmeterPsmetera', 'pp':'literPxPd'})})

#Definition of used census. If not available, set census = None
census = dict({'table': 'ger_census', 'col': dict({'SHAPE':['x_mp_100m', 'y_mp_100m'], 'inhabs':'inhabitans'}), 'coord_system':'epsg:3035'})
#Definition of used districts. If not available, set district = None
districts = None
#Definition of used sewage_network. If not available, set sewage_network = None
sewage_network = dict({'table': 'goettingen_sewage_network', 'col': dict({'SHAPE':['ST_ASText(SHAPE)'], 'name':'stras_name', 'type':'kanalart', 's_height':'sho', 'e_height':'shu', 'depth':'mtiefe', 'width':'pbreite', 'height':'phoehe', 'length':'HALTU_ENGE'}), 'coord_system':'epsg:5677', 'geo':['ST_GEOMFROMTEXT(ST_ASText(SHAPE))']})

#Information about the DN of pipes and its corresponding volume flow
pipes_dn_a_v_v = dict({'table': 'pipes_dn_a_v_v', 'col': dict({'DN':'DN_mm', 'A':'a_m2', 'v':'v100_mPs', 'V':'Q100_lPs'})})
#Information about the average water consumption on national level.
wc_per_inhab = dict({'table':'wc_per_inhab', 'col': dict({'country_s':'country_short', 'lPERpTIMESd':'lPERpersonTIMESday', 'data':'date','source':'source','info':'information','country_l':'country_name'})})

#Information about the district heating network, if not available just leave it out.
dhs_pipes = dict({'table': 'goettingen_dhs_pipes', 'col': dict({'SHAPE': ['ST_ASText(SHAPE)'], 'DN':'dn'}), 'coord_system':'epsg:5677'})

#All waste water treatment plants. If more than one just add it in the next row accroding to the given one.
[wwtp]
waste_water_treatment_plant = 9.919388, 51.552786

#If census in raster is given then set coord_system and inhabitants to None. If no census is given but only overall inhabitants of city set inhabitants to city's amount of inhabitants. Set coord_system adequat to the one of your district data. Partial map means the cut of map for visualisation purpouses.
[raster]
coord_system = None
inhabitants = None
partial_map = Polygon((9.9336125704 51.5358519306,
                       9.9619366976 51.5358519306,
                       9.9619366976 51.5469020742,
                       9.9336125704 51.5469020742,
                       9.9336125704 51.5358519306))

#If no district data is used, just set coord_system = None
[districts]
coord_system = None


#Names of import export. The graph of your city is downloaded manually via osmnx with osmnx.graph_from_polygon(). And then saved to a graphml file via osmnx.save_graphml(). Every information you do not have (like census, paths, etc.) skip them.
[Files]
path_import = os.getcwd() + os.sep + 'examples' + os.sep + 'input'
path_export = os.getcwd() + os.sep + 'examples' + os.sep + 'output'
graph = goettingen_by_place.graphml
DHS = r"Stanet FW Stand 2011_PIPE.SHP"
city = Goettingen
census = census.shp
paths = paths.shp